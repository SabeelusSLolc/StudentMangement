package com.example.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.model.Course;
import com.example.service.CourseService;

@RestController// This means that this class is a Controller
@RequestMapping(path="/course") // This means URL's start with /course (after Application path)
public class CourseController {
	@Autowired // This means to get the bean called courseRepository
	// Which is auto-generated by Spring, we will use it to handle the data

	private CourseService courseService;
	@PostMapping("/addCourse")
	public Course addCourse(@RequestBody Course course) {
		return courseService.CreateCourse(course);
	}
	
	@PostMapping("/addCourses")
	public List<Course> addCourses(@RequestBody List<Course> courses) {
		return courseService.createCourses(courses);
		
	}
	
	@GetMapping("/{id}")
	public Course getCourseByID(@PathVariable int id){
		return courseService.getCourseById(id);
		
	}
	
	@GetMapping("/getCourses")
	public List<Course> getAllCourses(){
		return courseService.getAllCourses();
		
	}
	
	@PutMapping("/updateCourse")
	public Course updateCourse(@RequestBody Course course)
	{
		return courseService.updateCourse(course);
	}
	
	@DeleteMapping("/{id}")
	public String deleteCourse(@PathVariable int id) {
		return courseService.deleteCourseById(id);
	}
	
	//enroll 
	@PostMapping("/{courseId}/enroll/{studentId}")
    public ResponseEntity<String> enrollStudentToCourse(@PathVariable int courseId,@PathVariable int studentId) {
        courseService.enrollStudentToCourse(courseId, studentId);
        return ResponseEntity.ok("Student enrolled in the course");
    }
	
	//unenroll 
	@DeleteMapping("/{courseId}/unenroll/{studentId}")
	    public ResponseEntity<String> unenrollStudentFromCourse( @PathVariable int courseId, @PathVariable int studentId ) {
	        courseService.unenrollStudentFromCourse(courseId, studentId);
	        return ResponseEntity.ok("Student unenrolled from the course");
	    }
}
